
import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

HISTORY_FILE = "history.csv"

def Mo_Giao_Dien_Lich_Su():
    root = tk.Tk()
    root.title("üìú L·ªãch s·ª≠ ch·∫°y thu·∫≠t to√°n Pikachu")
    root.geometry("900x600")
    root.configure(bg="#e9eff6")

    style = ttk.Style()
    style.theme_use("clam")
    style.configure("Treeview.Heading", font=("Segoe UI", 11, "bold"), background="#bfd6ec")
    style.configure("Treeview", font=("Segoe UI", 10), rowheight=25)

    tk.Label(root, text="L·ªäCH S·ª¨ THU·∫¨T TO√ÅN", font=("Arial", 18, "bold"),
             bg="#e9eff6", fg="#1a4b7a").pack(pady=10)

    # ƒê·ªçc d·ªØ li·ªáu
    try:
        df = pd.read_csv(HISTORY_FILE)
    except FileNotFoundError:
        messagebox.showinfo("Th√¥ng b√°o", "Ch∆∞a c√≥ l·ªãch s·ª≠ n√†o ƒë∆∞·ª£c ghi!")
        root.destroy()
        return

    frame = ttk.Frame(root)
    frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    cols = list(df.columns)
    tree = ttk.Treeview(frame, columns=cols, show="headings")
    for col in cols:
        tree.heading(col, text=col)
        tree.column(col, width=130, anchor=tk.CENTER)

    for _, row in df.iterrows():
        tree.insert("", tk.END, values=list(row))

    vsb = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
    tree.configure(yscroll=vsb.set)
    vsb.pack(side="right", fill="y")
    tree.pack(fill=tk.BOTH, expand=True)

    def So_Sanh():
        import numpy as np
        import matplotlib.pyplot as plt
        from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

        # ƒë·ªçc d·ªØ li·ªáu
        try:
            df = pd.read_csv(HISTORY_FILE)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file l·ªãch s·ª≠: {e}")
            return

        # --- T·ª± ƒë·ªông t√¨m t√™n c·ªôt (h·ªó tr·ª£ bi·∫øn th·ªÉ v√† BOM) ---
        cols = list(df.columns)
        def find_col(possible_names):
            for c in cols:
                cn = c.strip().lower()
                for nm in possible_names:
                    if nm in cn:
                        return c
            return None

        algo_col = find_col(["thu·∫≠t", "thuat", "algorithm", "algo", "thu·∫≠t to√°n"])
        level_col = find_col(["level", "c·∫•p", "cap", "lev"])
        time_col  = find_col(["th·ªùi gian", "thoi gian", "time"])
        mem_col   = find_col(["b·ªô nh·ªõ", "bo nho", "memory", "mem"])

        if not algo_col or not level_col or not time_col or not mem_col:
            messagebox.showerror("L·ªói", f"File l·ªãch s·ª≠ thi·∫øu c·ªôt c·∫ßn thi·∫øt.\nT√¨m ƒë∆∞·ª£c c·ªôt: algo={algo_col}, level={level_col}, time={time_col}, mem={mem_col}")
            print("Columns in CSV:", cols)
            return

        # Chu·∫©n ho√° dataframe: strip strings, l√†m lowercase cho thu·∫≠t to√°n
        df = df.copy()
        # remove leading/trailing spaces in headers already handled by find_col returning actual column name

        # Chu·∫©n h√≥a thu·∫≠t to√°n (lo·∫°i kho·∫£ng tr·∫Øng th·ª´a)
        df[algo_col] = df[algo_col].astype(str).str.strip()

        # Chuy·ªÉn Level v·ªÅ s·ªë nguy√™n, lo·∫°i b·ªè h√†ng c√≥ Level kh√¥ng h·ª£p l·ªá
        df[level_col] = pd.to_numeric(df[level_col], errors="coerce")
        df = df.dropna(subset=[level_col])
        df[level_col] = df[level_col].astype(int)

        # Chuy·ªÉn time v√† mem sang s·ªë (n·∫øu c√≥ l·ªói, ƒë·∫∑t NaN)
        df[time_col] = pd.to_numeric(df[time_col], errors="coerce")
        df[mem_col]  = pd.to_numeric(df[mem_col], errors="coerce")

        # --- nh√≥m theo thu·∫≠t to√°n ---
        REQUIRED_LEVELS = list(range(1, 7))  # 1..6

        algos_ok = []
        avg_times = []
        avg_mems = []

        grouped = df.groupby(algo_col)

        debug_lines = []
        for algo, sub in grouped:
            # lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a trong t√™n thu·∫≠t to√°n
            algo_norm = algo.strip()

            # t√≠nh mean cho t·ª´ng level (n·∫øu c√≥ duplicate cho c√πng level th√¨ l·∫•y mean)
            per_level = sub.groupby(level_col).agg({
                time_col: "mean",
                mem_col: "mean"
            }).sort_index()

            present_levels = list(per_level.index.astype(int))
            debug_lines.append(f"{algo_norm}: levels present = {present_levels}")

            # ki·ªÉm tra ƒë·ªß c√°c level 1..6
            if not set(REQUIRED_LEVELS).issubset(set(present_levels)):
                # kh√¥ng ƒë·ªß, b·ªè qua
                continue

            # l·∫•y mean c·ªßa 6 level (mean of per-level means)
            times_for_6 = per_level.loc[REQUIRED_LEVELS, time_col].values
            mems_for_6  = per_level.loc[REQUIRED_LEVELS, mem_col].values

            avg_time = float(np.nanmean(times_for_6))
            avg_mem  = float(np.nanmean(mems_for_6))

            algos_ok.append(algo_norm)
            avg_times.append(round(avg_time, 3))
            avg_mems.append(round(avg_mem, 3))

        # In debug ra console (gi√∫p b·∫°n bi·∫øt thu·∫≠t to√°n n√†o thi·∫øu level n√†o)
        print("=== Debug: levels present per algorithm ===")
        for ln in debug_lines:
            print(ln)

        if len(algos_ok) == 0:
            message = "Ch∆∞a c√≥ thu·∫≠t to√°n n√†o ho√†n th√†nh ƒë·ªß 6 level!\n\n"
            message += "Th√¥ng tin chi ti·∫øt ƒë√£ ƒë∆∞·ª£c in ra console (terminal) ƒë·ªÉ ki·ªÉm tra c√°c level hi·ªán c√≥ m·ªói thu·∫≠t to√°n."
            messagebox.showinfo("Th√¥ng b√°o", message)
            return

        # t·∫°o DataFrame t√≥m t·∫Øt
        summary = pd.DataFrame({
            "Thu·∫≠t to√°n": algos_ok,
            "AVG_TIME": avg_times,
            "AVG_MEMORY": avg_mems
        }).set_index("Thu·∫≠t to√°n")

        # Hi·ªÉn th·ªã popup m·ªõi v·ªõi b·∫£ng t√≥m t·∫Øt v√† bi·ªÉu ƒë·ªì
        win = tk.Toplevel(root)
        win.title("So s√°nh trung b√¨nh (thu·∫≠t to√°n ƒë√£ ho√†n th√†nh 6 level)")
        win.geometry("900x600")
        win.configure(bg="#eef2f5")

        # show table (ƒë·∫ßy ƒë·ªß 3 c·ªôt: Thu·∫≠t to√°n | AVG_TIME | AVG_MEMORY)
        frame_top = ttk.Frame(win)
        frame_top.pack(fill=tk.BOTH, expand=False, padx=10, pady=6)

        tbl = ttk.Treeview(frame_top, columns=["Algo", "AVG_TIME", "AVG_MEMORY"], show="headings", height=6)
        tbl.heading("Algo", text="Thu·∫≠t to√°n")
        tbl.heading("AVG_TIME", text="AVG_TIME (s)")
        tbl.heading("AVG_MEMORY", text="AVG_MEMORY (MB)")
        tbl.column("Algo", anchor=tk.CENTER, width=200)
        tbl.column("AVG_TIME", anchor=tk.CENTER, width=180)
        tbl.column("AVG_MEMORY", anchor=tk.CENTER, width=180)

        for algo in summary.index:
            tbl.insert("", tk.END, values=(algo, summary.loc[algo, "AVG_TIME"], summary.loc[algo, "AVG_MEMORY"]))

        tbl.pack(fill=tk.X, padx=10, pady=6)

        # V·∫Ω bi·ªÉu ƒë·ªì (2 c·ªôt)
        fig, axes = plt.subplots(1, 2, figsize=(10, 4))
        summary["AVG_TIME"].plot(kind="bar", ax=axes[0], color="#4fa6d5", rot=45)
        axes[0].set_title("Th·ªùi gian trung b√¨nh (s)")
        axes[0].set_ylabel("Seconds")
        axes[0].grid(axis="y", linestyle="--", alpha=0.6)

        summary["AVG_MEMORY"].plot(kind="bar", ax=axes[1], color="#f5a623", rot=45)
        axes[1].set_title("B·ªô nh·ªõ trung b√¨nh (MB)")
        axes[1].set_ylabel("MB")
        axes[1].grid(axis="y", linestyle="--", alpha=0.6)

        plt.tight_layout()

        canvas = FigureCanvasTkAgg(fig, master=win)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        btn_frame = ttk.Frame(win)
        btn_frame.pack(fill=tk.X, pady=6)
        ttk.Button(btn_frame, text="ƒê√≥ng", command=win.destroy).pack(side=tk.RIGHT, padx=12)


    ttk.Button(root, text="üìä So s√°nh", command=So_Sanh,
               style="Accent.TButton").pack(pady=10)
    root.mainloop()
